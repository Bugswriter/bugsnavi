#+TITLE: Bugs Navi OS
#+AUTHOR: Suraj Kushwah

Navi (aka. bugsnavi) is a Auto Rice Bootstrapping script of [[https://bugswriter.com][bugswriter]].
Navi is a minimal script that will provide a fully-featured terminal based
OS.

I am writing this because I got bored with installing arch linux manually
All my friends keep asking me to make their systems exactly like me.
This is why I end up writing this script to make things quicker for me.

* Stage 0
First we have to get prepare for Arch installation. Lets call it stage 0.
Reference: https://wiki.archlinux.org/title/installation_guide
#+begin_src sh
  echo "=== Welcome to navi OS installer script ==="
  echo "> Please make sure your internet is connected"
#+end_src

** Partition the disks
First and very important thing is making partition.
If you are intending to wipe your hard drive and install linux.
Then usually what I do is -
- =/dev/sda1= for efi (520mb)
- =/dev/sda2= for linux. (rest)
We are going to use =cfdisk= to make partition.
No need to create a new efi partition if it exist, unless you want to.
#+begin_src sh
  echo "Checkout your drive names"
  lsblk
  echo "Enter the complete drive name (eg. /dev/sda)"
  read drive
  cfdisk $drive
#+end_src

** Format the partitions
Now I assume you managed to create your linux and efi partition correctly.
- Now we have to give our linux partition =ext4= format.
- and our efi parition =fat32= format. (only if efi is made).
#+begin_src sh
  echo "Enter the complete name of linux partition you made (eg. /dev/sda1): "
  read partition
  mkfs.ext4 $partition
  read -p "Did you also create efi partition? [y/n]" answer
  if [[ $answer = y ]] ; then
      echo "Enter the full name of EFI partition (eg. /dev/sda2): "
      read efipartition
      mkfs.vfat -F 32 $efipartition
  fi
#+end_src

** Mount and Install
It's time to mount our brand new and empty linux partition we made. So we can
install our hot new arch linux kernel and packages.
#+begin_src sh
  mount $partition /mnt
  pacstrap /mnt base base-devel linux linux-firmware
  genfstab -U /mnt >> /mnt/etc/fstab  
#+end_src

** Chroot Hack
So right now we are in our arch image system. But in order to configure our new
installation we have to change our root to new linux partition. For that we
have to use =arch-chroot=. But since we are running commands from script.
If we do chroot, we won't be able to run commands.
One solution for this is just use =arch-chroot /mnt <command>=. This will
chroot - run command - exit.
We also have to type =arch-chroot /mnt= before every command.
So what I did is. I am not going to exit out this shell script, but before
exiting, we are gonna make a new shell script on =/mnt/= or for new system.
The root (=/=). Then we will =arch-chroot /mnt ./new_script.sh=.
#+begin_src sh
  sed '1,/^#stage1$/d' `basename $0` > /mnt/stage1.sh
  chmod +x /mnt/stage1.sh
  arch-chroot /mnt ./stage1.sh
  exit
#+end_src

* Stage 1
At this point your script is finished executing stage 0.
Which means our base system is installed, stage 1 will mostly be about
configurations.

** Parallel Download
The package manager of Arch is =pacman=. Pacman now provide a feature
of downloading packages parallely, it's good and fast so lets do this.
#+begin_src sh
  pacman -S --noconfirm sed
  sed -i "s/^#ParallelDownloads = 5$/ParallelDownloads = 15/" /etc/pacman.conf  
#+end_src

** Time
Time to setup time, for my system, So I can always keep track of time.
so do my programs.
#+CAPTION: I love whiterose. (Mr. Robot)
[[https://www.magicalquote.com/wp-content/uploads/2016/07/Whiterose-season-1.jpg]]
#+begin_src sh
  ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
  hwclock --systohc  
#+end_src

** Locale
A locale consists of a number of categories for which country-dependent
formatting or other specifications exist. We are going to use =UTF-8=.
We are also going to use =us=, keymap.
#+begin_src sh
  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen
  echo "LANG=en_US.UTF-8" > /etc/locale.conf
  echo "KEYMAP=us" > /etc/vconsole.conf
#+end_src

** Hostname
Hostname is the computer name, most people name their computer any random
crap. But I like to call my computer /mundus/. When you open your terminal
you will see =yourusername@yourhostname=.
#+begin_src sh
  echo "Hostname: "
  read hostname
  echo $hostname > /etc/hostname
#+end_src

** Network Config
Lets create hostname file. My =127.0.0.1= is aliased to localhost.
Like any other normal person.
#+begin_src sh
  echo "127.0.0.1       localhost" >> /etc/hosts
  echo "::1             localhost" >> /etc/hosts
  echo "127.0.1.1       $hostname.localdomain $hostname" >> /etc/hosts
#+end_src

** Initramfs
Creating a new initramfs is usually not required, because mkinitcpio
was run on installation of the kernel package with pacstrap. 
#+begin_src sh
  mkinitcpio -P
#+end_src

** Root Password
Now lets set root password, root password and user password is supposed to
be different. But I like to keep it same for simpilicity. But we will worry
about this later, when we make a user.
#+begin_src sh
  passwd
#+end_src

** Bootloader
Bootloader is probably the most annoying thing for new linux users.
Here, lets install grub. Notice I am highly assuming you have UEFI
partition, if you don't good luck. In last 5 years almost every
computer have UEFI BOIS.
I have no reason to wait... I don't have dual boot. So I will remove
the grub wait time.
#+begin_src sh
  pacman --noconfirm -S grub efibootmgr os-prober
  echo "Enter EFI partition: " 
  read efipartition
  mkdir /boot/efi
  mount $efipartition /boot/efi 
  grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
  sed -i 's/quiet/pci=noaer/g' /etc/default/grub
  sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/g' /etc/default/grub
  grub-mkconfig -o /boot/grub/grub.cfg
#+end_src

** Installing Programs
It's time to make Navi an OS which one can use daily, every single program this
script will install the best tools one could find for various purposes.
Keep in mind Navi is 90% CLI based OS. So almost every tool we will install
is also CLI based. The only true exceptions are just =browser=.

*** Softwares
So lets install softwares for our daily purpose.
|-------------+---------------------------------------------------------------|
| Package     | Description                                                   |
|-------------+---------------------------------------------------------------|
| qutebrowser | A keyboard-driven, vim-like browser based on PyQt5            |
| sxiv        | Simple X Image Viewer                                         |
| zathura     | Minimalistic document viewer                                  |
| mpv         | A free, open source, and cross-platform media player          |
| mpd         | Flexible, powerful, server-side application for playing music |
| irssi       | Modular text mode IRC client with Perl scripting              |
| ncmpcpp     | Fully featured MPD client which runs in a terminal            |
| tremc       | A TUI Client for transmission daemon                          |
| newsboat    | An RSS/Atom feed reader for text terminals                    |
| ytfzf       | Find and watch youtube videos from the terminal               |
| lf          | Terminal based simple, vim-like file manager                  |
|-------------+---------------------------------------------------------------|

#+begin_src sh
  pacman -S --noconfirm \
	 qutebrowser \
	 sxiv \
	 zathura \
	 mpv \
	 mpd \
	 lf \
	 ncmpcpp \
	 git \
	 ytfzf \
	 tremc \
	 irssi \
	 newsboat \
	 neomutt \
#+end_src

*** Utilies

** Default Shell
Dash is a fast and minimal shell. Dash deserve to be my bourne shell. 
#+begin_src sh
  rm /bin/sh
  ln -s dash /bin/sh  
#+end_src

** New User
Lets create a new user for our system.
Also make sure to add him in wheel group. wheel is a group in arch
linux which get sudo permission. So by putting our user in wheel group
we allow our user to use sudo no password.
#+begin_src sh
  echo "Enter Username: "
  read username
  useradd -m -G wheel -s /bin/zsh $username
  echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
#+end_src

** Setting up for next stage
#+begin_src sh
  echo "Pre-Installation Finish Reboot now"
  ai3_path=/home/$username/arch_install3.sh
  sed '1,/^#part3$/d' arch_install2.sh > $ai3_path
  chown $username:$username $ai3_path
  chmod +x $ai3_path
  su -c $ai3_path -s /bin/sh $username
#+end_src

* Stage 2
** Dotfiles
Dotfiles are basically the settings for all the programs we have
installed, I use git to manage my dotfiles. All we have to do is close
my dotfiles and that's it.
#+begin_src sh
  #part3  
  cd $HOME
  git clone --separate-git-dir=$HOME/.dotfiles https://github.com/bugswriter/dotfiles.git tmpdotfiles
  rsync --recursive --verbose --exclude '.git' tmpdotfiles/ $HOME/
  rm -r tmpdotfiles
  alias dots='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
  dots config --local status.showUntrackedFiles no  
#+end_src

** Suckless
*** Window Manager
I'm addicted to suckless's dwm. I find dwm very solid and simple. It
just works for me. I have my custom keybindings and I am addicted to
it now. I don't use many patches. I like to keep things simple. It
fits well with unix philosophy.
#+begin_src sh
  git clone --depth=1 https://github.com/Bugswriter/dwm.git ~/.local/src/dwm
  sudo make -C ~/.local/src/dwm install
#+end_src

*** Terminal
Terminal is crucial to use our OS. Again we are going to go with
suckless. Suckless's simple terminal (aka. st) works fine I prefer
luke smith fork. It comes with some additional goodies.
#+begin_src sh
  git clone --depth=1 https://github.com/Bugswriter/st.git ~/.local/src/st
  sudo make -C ~/.local/src/st install  
#+end_src

*** Menu
We need a menu for not just opening a program but many other purposes
(example - system menu). Dmenu is a perfect all in one thing for that.
#+begin_src sh
  git clone --depth=1 https://github.com/Bugswriter/dmenu.git ~/.local/src/dmenu
  sudo make -C ~/.local/src/dmenu install
#+end_src

** Status Bar
We are gonna use dwmblocks with our dwm for easily managing our status
bar.
#+begin_src sh
  git clone --depth=1 https://github.com/bugswriter/dwmblocks.git ~/.local/src/dwmblocks
  sudo make -C ~/.local/src/dwmblocks install
#+end_src

** Password Prompt
#+begin_src sh
  # dmenu: Dmenu based Password Prompt
  git clone --depth=1 https://github.com/ritze/pinentry-dmenu.git ~/.local/src/pinentry-dmenu
  sudo make -C ~/.local/src/pinentry-dmenu clean install
#+end_src

** AUR Helper
#+begin_src sh
  git clone https://aur.archlinux.org/pikaur.git
  cd pikaur
  makepkg -fsri
#+end_src

** Some AUR Packages
#+begin_src sh
  cd
  pikaur -S libxft-bgra-git yt-dlp-drop-in
  mkdir dl dox imp music pix pub code
#+end_src

** Clean Up
Config file of xinit (i.e =.xinitrc=) and .zprofile needs to go on
home. But for sake of cleanup in my dotfiles I keep it insite
=~/.config=. Here we can create symbolic links for best of the both
worlds.
#+begin_src sh
  ln -s ~/.config/x11/xinitrc .xinitrc
  ln -s ~/.config/shell/profile .zprofile
#+end_src

** Oh My ZSH
I know it's not cool to use it. But I use it.
#+begin_src sh
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  mv ~/.oh-my-zsh ~/.config/zsh/oh-my-zsh
  rm ~/.zshrc ~/.zsh_history  
#+end_src
